# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 increasing(intP[..] t, int32 taille)
  requires (_C_23 : (((_C_25 : (\offset_min(t) <= 0)) &&
                       (_C_26 : (\offset_max(t) >= (taille - 1)))) &&
                      (_C_27 : (taille > 0))));
behavior default:
  ensures (_C_20 : ((_C_21 : ((\forall integer i;
                                (((0 <= i) && (i < (\at(taille,Old) - 1))) ==>
                                  ((\at(t,Old) + i).intM <=
                                    (\at(t,Old) + (i + 1)).intM))) ==>
                               (\result == 1))) &&
                     (_C_22 : ((\exists integer i_0;
                                 (((0 <= i_0) &&
                                    (i_0 < (\at(taille,Old) - 1))) &&
                                   ((\at(t,Old) + i_0).intM >
                                     (\at(t,Old) + (i_0 + 1)).intM))) ==>
                                (\result == 0)))));
{  
   (var int32 i);
   
   (var int32 __retres);
   
   {  
      {  (_C_1 : (i = 0));
         
         loop 
         behavior default:
           invariant (_C_4 : ((_C_5 : (0 <= i)) &&
                               (_C_6 : (i <= (taille - 1)))));
         behavior default:
           invariant (_C_3 : (\forall integer j;
                               (((0 <= j) && (j < i)) ==>
                                 ((t + j).intM <= (t + (j + 1)).intM))));
         variant (_C_2 : ((taille - i) - 1));
         while (true)
         {  
            {  (if (i < (_C_8 : ((_C_7 : (taille - 1)) :> int32))) then () else 
               (goto while_0_break));
               
               {  (if ((_C_15 : (_C_14 : (t + i)).intM) >
                        (_C_13 : (_C_12 : (t +
                                            (_C_11 : ((_C_10 : (i + 1)) :> int32)))).intM)) then 
                  {  (_C_9 : (__retres = 0));
                     
                     (goto return_label)
                  } else ())
               };
               (_C_18 : (i = (_C_17 : ((_C_16 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (_C_19 : (__retres = 1));
      (return_label : 
      (return __retres))
   }
}
