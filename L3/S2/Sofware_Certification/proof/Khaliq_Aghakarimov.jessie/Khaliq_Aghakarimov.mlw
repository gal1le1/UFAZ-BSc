theory Jessie_model

use import int.Int

use bool.Bool

use import jessie_why3theories.Jessie_memory_model

type charP

type int32

type int8

type intP

type padding

type voidP

function charP_tag  : (tag_id charP)

axiom charP_int "charP_int": ((int_of_tag charP_tag) = (1))

function charP_of_pointer_address (pointer ()) : (pointer charP)

axiom charP_of_pointer_address_of_pointer_addr "charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer charP).
  (p = (charP_of_pointer_address (pointer_address p))))

axiom charP_parenttag_bottom "charP_parenttag_bottom":
 (parenttag charP_tag bottom_tag)

axiom charP_tags "charP_tags":
 (forall x:(pointer charP).
  (forall charP_tag_table:(tag_table charP).
   (instanceof charP_tag_table x charP_tag)))

function integer_of_int32 int32 : int

predicate eq_int32(x:int32) (y:int32) =
 ((integer_of_int32 x) = (integer_of_int32 y))

function integer_of_int8 int8 : int

predicate eq_int8(x:int8) (y:int8) =
 ((integer_of_int8 x) = (integer_of_int8 y))

function int32_of_integer int : int32

axiom int32_coerce "int32_coerce":
 (forall x:int.
  (((Int.(<=) (-2147483648) x) /\ (Int.(<=) x (2147483647))) ->
   ((integer_of_int32 (int32_of_integer x)) = x)))

axiom int32_extensionality "int32_extensionality":
 (forall x:int32.
  (forall y:int32[((integer_of_int32 x) = (integer_of_int32 y))].
   (((integer_of_int32 x) = (integer_of_int32 y)) -> (x = y))))

axiom int32_range "int32_range":
 (forall x:int32.
  ((Int.(<=) (-2147483648) (integer_of_int32 x))
  /\ (Int.(<=) (integer_of_int32 x) (2147483647))))

function int8_of_integer int : int8

axiom int8_coerce "int8_coerce":
 (forall x:int.
  (((Int.(<=) (-128) x) /\ (Int.(<=) x (127))) ->
   ((integer_of_int8 (int8_of_integer x)) = x)))

axiom int8_extensionality "int8_extensionality":
 (forall x:int8.
  (forall y:int8[((integer_of_int8 x) = (integer_of_int8 y))].
   (((integer_of_int8 x) = (integer_of_int8 y)) -> (x = y))))

axiom int8_range "int8_range":
 (forall x:int8.
  ((Int.(<=) (-128) (integer_of_int8 x))
  /\ (Int.(<=) (integer_of_int8 x) (127))))

function intP_tag  : (tag_id intP)

axiom intP_int "intP_int": ((int_of_tag intP_tag) = (1))

function intP_of_pointer_address (pointer ()) : (pointer intP)

axiom intP_of_pointer_address_of_pointer_addr "intP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer intP).
  (p = (intP_of_pointer_address (pointer_address p))))

axiom intP_parenttag_bottom "intP_parenttag_bottom":
 (parenttag intP_tag bottom_tag)

axiom intP_tags "intP_tags":
 (forall x:(pointer intP).
  (forall intP_tag_table:(tag_table intP).
   (instanceof intP_tag_table x intP_tag)))

predicate left_valid_struct_charP(p:(pointer charP)) (a:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_min charP_alloc_table p) <= a)

predicate left_valid_struct_intP(p:(pointer intP)) (a:int) (intP_alloc_table:(alloc_table intP)) =
 ((offset_min intP_alloc_table p) <= a)

predicate left_valid_struct_voidP(p:(pointer voidP)) (a:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_min voidP_alloc_table p) <= a)

axiom pointer_addr_of_charP_of_pointer_address "pointer_addr_of_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (charP_of_pointer_address p))))

axiom pointer_addr_of_intP_of_pointer_address "pointer_addr_of_intP_of_pointer_address":
 (forall p:(pointer ()). (p = (pointer_address (intP_of_pointer_address p))))

function voidP_of_pointer_address (pointer ()) : (pointer voidP)

axiom pointer_addr_of_voidP_of_pointer_address "pointer_addr_of_voidP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (voidP_of_pointer_address p))))

predicate right_valid_struct_charP(p:(pointer charP)) (b:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_max charP_alloc_table p) >= b)

predicate right_valid_struct_intP(p:(pointer intP)) (b:int) (intP_alloc_table:(alloc_table intP)) =
 ((offset_max intP_alloc_table p) >= b)

predicate right_valid_struct_voidP(p:(pointer voidP)) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_max voidP_alloc_table p) >= b)

predicate strict_valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_root_intP(p:(pointer intP)) (a:int) (b:int) (intP_alloc_table:(alloc_table intP)) =
 (((offset_min intP_alloc_table p) = a)
 /\ ((offset_max intP_alloc_table p) = b))

predicate strict_valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate strict_valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_struct_intP(p:(pointer intP)) (a:int) (b:int) (intP_alloc_table:(alloc_table intP)) =
 (((offset_min intP_alloc_table p) = a)
 /\ ((offset_max intP_alloc_table p) = b))

predicate strict_valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_root_intP(p:(pointer intP)) (a:int) (b:int) (intP_alloc_table:(alloc_table intP)) =
 (((offset_min intP_alloc_table p) <= a)
 /\ ((offset_max intP_alloc_table p) >= b))

predicate valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

predicate valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_struct_intP(p:(pointer intP)) (a:int) (b:int) (intP_alloc_table:(alloc_table intP)) =
 (((offset_min intP_alloc_table p) <= a)
 /\ ((offset_max intP_alloc_table p) >= b))

predicate valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

function voidP_tag  : (tag_id voidP)

axiom voidP_int "voidP_int": ((int_of_tag voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr "voidP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer voidP).
  (p = (voidP_of_pointer_address (pointer_address p))))

axiom voidP_parenttag_bottom "voidP_parenttag_bottom":
 (parenttag voidP_tag bottom_tag)

axiom voidP_tags "voidP_tags":
 (forall x:(pointer voidP).
  (forall voidP_tag_table:(tag_table voidP).
   (instanceof voidP_tag_table x voidP_tag)))

end

module Jessie_program

use import int.Int

use bool.Bool

use import jessie_why3theories.Jessie_memory_model

use import Jessie_model

use import ref.Ref

use import jessie_why3.JessieDivision

use import jessie_why3.Jessie_memory_model_parameters

exception Goto_while_0_break_0_exc ()

exception Goto_while_0_break_exc ()

exception Loop_continue_exc ()

exception Loop_exit_exc ()

exception Return_label_exc ()

val charP_alloc_table : ref (alloc_table charP)

val charP_tag_table : ref (tag_table charP)

val alloc_struct_charP
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { true } writes { charP_alloc_table, charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val alloc_struct_charP_requires
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { (Int.(>=) n (0)) } writes { charP_alloc_table,
    charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val intP_alloc_table : ref (alloc_table intP)

val intP_tag_table : ref (tag_table intP)

val alloc_struct_intP
 (n:int)
  (intP_alloc_table:ref (alloc_table intP))
   (intP_tag_table:ref (tag_table intP)) : (pointer intP)
    requires { true } writes { intP_alloc_table, intP_tag_table }
     ensures { ((strict_valid_struct_intP result (0) (Int.(-) n (1))
                !intP_alloc_table)
               /\ ((alloc_extends (old !intP_alloc_table) !intP_alloc_table)
                  /\ ((alloc_fresh (old !intP_alloc_table) result n)
                     /\ (instanceof !intP_tag_table result intP_tag)))) }

val alloc_struct_intP_requires
 (n:int)
  (intP_alloc_table:ref (alloc_table intP))
   (intP_tag_table:ref (tag_table intP)) : (pointer intP)
    requires { (Int.(>=) n (0)) } writes { intP_alloc_table, intP_tag_table }
     ensures { ((strict_valid_struct_intP result (0) (Int.(-) n (1))
                !intP_alloc_table)
               /\ ((alloc_extends (old !intP_alloc_table) !intP_alloc_table)
                  /\ ((alloc_fresh (old !intP_alloc_table) result n)
                     /\ (instanceof !intP_tag_table result intP_tag)))) }

val voidP_alloc_table : ref (alloc_table voidP)

val voidP_tag_table : ref (tag_table voidP)

val alloc_struct_voidP
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val alloc_struct_voidP_requires
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { (Int.(>=) n (0)) } writes { voidP_alloc_table,
    voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val any_int32 (_anonymous:()) : int32 requires { true }  ensures { true }

val any_int8 (_anonymous:()) : int8 requires { true }  ensures { true }

val doubled
 (t:(pointer intP))
  (taille:int32)
   (intP_intM_t_1:ref (memory intP int32))
    (intP_t_1_alloc_table:(alloc_table intP)) : ()
     requires { true } reads { intP_intM_t_1 }  writes { intP_intM_t_1 }
      ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 48 9 55#
                (forall i:int.
                 (((Int.(<=) (0) i) /\ (Int.(<) i (integer_of_int32 taille))) ->
                  ((integer_of_int32 (select !intP_intM_t_1 (shift t i))) = 
                  (Int.(*) (2) i))))) }

val doubled_requires
 (t:(pointer intP))
  (taille:int32)
   (intP_intM_t_1:ref (memory intP int32))
    (intP_t_1_alloc_table:(alloc_table intP)) : ()
     requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 45#
                ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 33#
                 (Int.(<=) (offset_min intP_t_1_alloc_table t) (0)))
                /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 33#
                    (Int.(>=) (offset_max intP_t_1_alloc_table t)
                    (Int.(-) (integer_of_int32 taille) (1))))
                   /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 37 45#
                      (Int.(>) (integer_of_int32 taille) (0)))))) }
     reads { intP_intM_t_1 }  writes { intP_intM_t_1 }
      ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 48 9 55#
                (forall i:int.
                 (((Int.(<=) (0) i) /\ (Int.(<) i (integer_of_int32 taille))) ->
                  ((integer_of_int32 (select !intP_intM_t_1 (shift t i))) = 
                  (Int.(*) (2) i))))) }

val increasing
 (t_0:(pointer intP))
  (taille_0:int32)
   (intP_t_0_2_alloc_table:(alloc_table intP))
    (intP_intM_t_0_2:(memory intP int32)) : int32
     requires { true }
      ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/" 0 0 0#
                ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 65 10 76#
                 ((forall i_0_0:int.
                   (((Int.(<=) (0) i_0_0)
                    /\ (Int.(<) i_0_0
                       (Int.(-) (integer_of_int32 taille_0) (1)))) ->
                    (Int.(<=)
                    (integer_of_int32
                    (select intP_intM_t_0_2 (shift t_0 i_0_0)))
                    (integer_of_int32
                    (select intP_intM_t_0_2 (shift t_0 (Int.(+) i_0_0 (1)))))))) ->
                  ((integer_of_int32 result) = (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 66 10 74#
                   ((exists i_1:int.
                     ((Int.(<=) (0) i_1)
                     /\ ((Int.(<) i_1
                         (Int.(-) (integer_of_int32 taille_0) (1)))
                        /\ (Int.(>)
                           (integer_of_int32
                           (select intP_intM_t_0_2 (shift t_0 i_1)))
                           (integer_of_int32
                           (select intP_intM_t_0_2
                           (shift t_0 (Int.(+) i_1 (1))))))))) ->
                    ((integer_of_int32 result) = (0)))))) }

val increasing_requires
 (t_0:(pointer intP))
  (taille_0:int32)
   (intP_t_0_2_alloc_table:(alloc_table intP))
    (intP_intM_t_0_2:(memory intP int32)) : int32
     requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 46#
                ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 34#
                 (Int.(<=) (offset_min intP_t_0_2_alloc_table t_0) (0)))
                /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 34#
                    (Int.(>=) (offset_max intP_t_0_2_alloc_table t_0)
                    (Int.(-) (integer_of_int32 taille_0) (1))))
                   /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 38 46#
                      (Int.(>) (integer_of_int32 taille_0) (0)))))) }
      ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/" 0 0 0#
                ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 65 10 76#
                 ((forall i_0_0:int.
                   (((Int.(<=) (0) i_0_0)
                    /\ (Int.(<) i_0_0
                       (Int.(-) (integer_of_int32 taille_0) (1)))) ->
                    (Int.(<=)
                    (integer_of_int32
                    (select intP_intM_t_0_2 (shift t_0 i_0_0)))
                    (integer_of_int32
                    (select intP_intM_t_0_2 (shift t_0 (Int.(+) i_0_0 (1)))))))) ->
                  ((integer_of_int32 result) = (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 66 10 74#
                   ((exists i_1:int.
                     ((Int.(<=) (0) i_1)
                     /\ ((Int.(<) i_1
                         (Int.(-) (integer_of_int32 taille_0) (1)))
                        /\ (Int.(>)
                           (integer_of_int32
                           (select intP_intM_t_0_2 (shift t_0 i_1)))
                           (integer_of_int32
                           (select intP_intM_t_0_2
                           (shift t_0 (Int.(+) i_1 (1))))))))) ->
                    ((integer_of_int32 result) = (0)))))) }

val int32_of_integer_
 (x:int) : int32
  requires { ((Int.(<=) (-2147483648) x) /\ (Int.(<=) x (2147483647))) }
   ensures { ((integer_of_int32 result) = x) }

val int8_of_integer_
 (x:int) : int8
  requires { ((Int.(<=) (-128) x) /\ (Int.(<=) x (127))) }
   ensures { ((integer_of_int8 result) = x) }

val max3
 (num1:int32)
  (num2:int32)
   (num3:int32) : int32
    requires { true }
     ensures { ((((Int.(<=) (integer_of_int32 num1) (integer_of_int32 num2))
                 /\ (Int.(<=) (integer_of_int32 num2)
                    (integer_of_int32 num3))) ->
                 (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 22 11 26#
                 ((integer_of_int32 result) = (integer_of_int32 num3))))
               /\ ((((Int.(<=) (integer_of_int32 num1)
                     (integer_of_int32 num2))
                    /\ (Int.(>) (integer_of_int32 num2)
                       (integer_of_int32 num3))) ->
                    (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 18 11 26#
                    ((integer_of_int32 result) = (integer_of_int32 num2))))
                  /\ ((((Int.(>) (integer_of_int32 num1)
                        (integer_of_int32 num2))
                       /\ (Int.(<=) (integer_of_int32 num1)
                          (integer_of_int32 num3))) ->
                       (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 12 11 26#
                       ((integer_of_int32 result) = (integer_of_int32 num3))))
                     /\ (((Int.(>) (integer_of_int32 num1)
                          (integer_of_int32 num2))
                         /\ (Int.(>) (integer_of_int32 num1)
                            (integer_of_int32 num3))) ->
                         (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 6 11 26#
                         ((integer_of_int32 result) = (integer_of_int32 num1))))))) }

val max3_requires
 (num1:int32)
  (num2:int32)
   (num3:int32) : int32
    requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
               true) }
     ensures { ((((Int.(<=) (integer_of_int32 num1) (integer_of_int32 num2))
                 /\ (Int.(<=) (integer_of_int32 num2)
                    (integer_of_int32 num3))) ->
                 (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 22 11 26#
                 ((integer_of_int32 result) = (integer_of_int32 num3))))
               /\ ((((Int.(<=) (integer_of_int32 num1)
                     (integer_of_int32 num2))
                    /\ (Int.(>) (integer_of_int32 num2)
                       (integer_of_int32 num3))) ->
                    (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 18 11 26#
                    ((integer_of_int32 result) = (integer_of_int32 num2))))
                  /\ ((((Int.(>) (integer_of_int32 num1)
                        (integer_of_int32 num2))
                       /\ (Int.(<=) (integer_of_int32 num1)
                          (integer_of_int32 num3))) ->
                       (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 12 11 26#
                       ((integer_of_int32 result) = (integer_of_int32 num3))))
                     /\ (((Int.(>) (integer_of_int32 num1)
                          (integer_of_int32 num2))
                         /\ (Int.(>) (integer_of_int32 num1)
                            (integer_of_int32 num3))) ->
                         (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 6 11 26#
                         ((integer_of_int32 result) = (integer_of_int32 num1))))))) }

val monotonic
 (t_1:(pointer intP))
  (taille_1:int32)
   (intP_t_1_3_alloc_table:(alloc_table intP))
    (intP_intM_t_1_3:(memory intP int32)) : int32
     requires { true }  ensures { true }

val monotonic_requires
 (t_1:(pointer intP))
  (taille_1:int32)
   (intP_t_1_3_alloc_table:(alloc_table intP))
    (intP_intM_t_1_3:(memory intP int32)) : int32
     requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 48#
                ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 36#
                 (Int.(<=) (offset_min intP_t_1_3_alloc_table t_1) (0)))
                /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 36#
                    (Int.(>=) (offset_max intP_t_1_3_alloc_table t_1)
                    (Int.(-) (integer_of_int32 taille_1) (1))))
                   /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 40 48#
                      (Int.(>) (integer_of_int32 taille_1) (0)))))) }
      ensures { true }

val safe_int32_of_integer_
 (x:int) : int32
  requires { true }  ensures { ((integer_of_int32 result) = x) }

val safe_int8_of_integer_
 (x:int) : int8 requires { true }  ensures { ((integer_of_int8 result) = x) }

let doubled_ensures_default "W:diverges:N" "expl:Function doubled, default behavior"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 51 5 12#=
 fun (t : (pointer intP)) (taille : int32) (intP_intM_t_1 : ref (memory intP int32)) (intP_t_1_alloc_table : (alloc_table intP)) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 45#
             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 33#
              (Int.(<=) (offset_min intP_t_1_alloc_table t) (0)))
             /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 33#
                 (Int.(>=) (offset_max intP_t_1_alloc_table t)
                 (Int.(-) (integer_of_int32 taille) (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 37 45#
                   (Int.(>) (integer_of_int32 taille) (0))))))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 48 9 55#
            (forall i:int.
             (((Int.(<=) (0) i) /\ (Int.(<) i (integer_of_int32 taille))) ->
              ((integer_of_int32 (select !intP_intM_t_1 (shift t i))) = 
              (Int.(*) (2) i))))) } 
  ('Init: 
  try
   begin
     (let i_0 = ref (any_int32 ()) in
     try
      begin
        (let _jessie_99 = (i_0 := (safe_int32_of_integer_ (0))) in ());
       ('Loop_2: 
       begin
         loop
         invariant
           { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 54 17 58#
              (forall j:int.
               (((Int.(<=) (0) j) /\ (Int.(<) j (integer_of_int32 !i_0))) ->
                ((integer_of_int32 (select !intP_intM_t_1 (shift t j))) = 
                (Int.(*) (2) j)))))
             /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 53 17 29#
                ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 53 17 21#
                 (Int.(<=) (0) (integer_of_int32 !i_0)))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 53 20 29#
                   (Int.(<=) (integer_of_int32 !i_0)
                   (integer_of_int32 taille)))))) } 
          begin
            any () requires { true }  ensures { true } ;
           try
            begin
              (let _jessie_107 =
              begin
                (if (Int.(<) (integer_of_int32 !i_0) (integer_of_int32 taille))
                then () else (raise (Goto_while_0_break_exc ())));
               (let _jessie_105 =
               (let _jessie_101 =
               (safe_int32_of_integer_ (Int.(*) (2) (integer_of_int32 !i_0))) in
               (let _jessie_102 = t in
               (let _jessie_103 = (integer_of_int32 !i_0) in
               (let _jessie_104 = (shift _jessie_102 _jessie_103) in
               (safe_upd_ intP_intM_t_1 _jessie_104 _jessie_101))))) in ());
               (i_0 := (safe_int32_of_integer_ (Int.(+) (integer_of_int32 !i_0) (1))));
               !i_0 end in ()); (raise (Loop_continue_exc ())) end with
            Loop_continue_exc _jessie_4 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end) end with
      Goto_while_0_break_exc _jessie_2 ->
      ('While_0_break:  begin   (); (raise Return) end) end); (raise Return)
   end with Return -> () end) 

let doubled_safety "expl:Function doubled, Safety"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 51 5 12#=
 fun (t : (pointer intP)) (taille : int32) (intP_intM_t_1 : ref (memory intP int32)) (intP_t_1_alloc_table : (alloc_table intP)) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 45#
             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 33#
              (Int.(<=) (offset_min intP_t_1_alloc_table t) (0)))
             /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 10 33#
                 (Int.(>=) (offset_max intP_t_1_alloc_table t)
                 (Int.(-) (integer_of_int32 taille) (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 47 37 45#
                   (Int.(>) (integer_of_int32 taille) (0))))))  }
  ensures { true } 
  ('Init: 
  try
   begin
     (let i_0 = ref (any_int32 ()) in
     try
      begin
        (let _jessie_89 = (i_0 := (safe_int32_of_integer_ (0))) in ());
       ('Loop_1: 
       begin
         loop
         invariant
           { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/Khaliq_Aghakarimov.jc" 91 6 766#
             true) }
           variant { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 55 15 23# 
             (Int.(-) (integer_of_int32 taille) (integer_of_int32 !i_0))) }
          begin
            any ()
            requires { true } reads { i_0, intP_intM_t_1 } 
             ensures { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 54 17 58#
                        (forall j:int.
                         (((Int.(<=) (0) j)
                          /\ (Int.(<) j (integer_of_int32 !i_0))) ->
                          ((integer_of_int32
                           (select !intP_intM_t_1 (shift t j))) = (Int.(*)
                                                                  (2) j)))))
                       /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 53 17 29#
                          ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 53 17 21#
                           (Int.(<=) (0) (integer_of_int32 !i_0)))
                          /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 53 20 29#
                             (Int.(<=) (integer_of_int32 !i_0)
                             (integer_of_int32 taille)))))) } ;
           try
            begin
              (let _jessie_97 =
              begin
                (if (Int.(<) (integer_of_int32 !i_0) (integer_of_int32 taille))
                then () else (raise (Goto_while_0_break_exc ())));
               (let _jessie_95 =
               (let _jessie_91 =
               ("expl:arithmetic overflow"
               #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 58 9 12#
               (int32_of_integer_ (Int.(*) (2) (integer_of_int32 !i_0)))) in
               (let _jessie_92 = t in
               (let _jessie_93 = (integer_of_int32 !i_0) in
               (let _jessie_94 = (shift _jessie_92 _jessie_93) in
               ("expl:pointer dereference"
               #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/Khaliq_Aghakarimov.jc" 103 22 231#
               (offset_upd_ intP_t_1_alloc_table intP_intM_t_1 _jessie_92 _jessie_93 _jessie_91)))))) in
               ());
               (i_0 := ("expl:arithmetic overflow"
                       #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 57 23 26#
                       (int32_of_integer_ (Int.(+) (integer_of_int32 !i_0) (1)))));
               !i_0 end in ()); (raise (Loop_continue_exc ())) end with
            Loop_continue_exc _jessie_4 -> () end end end;
        (raise (Goto_while_0_break_exc ())) end) end with
      Goto_while_0_break_exc _jessie_2 ->
      ('While_0_break:  begin   (); (raise Return) end) end); (raise Return)
   end with Return -> () end) 

let increasing_ensures_default "W:diverges:N" "expl:Function increasing, default behavior"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 69 4 14#=
 fun (t_0 : (pointer intP)) (taille_0 : int32) (intP_t_0_2_alloc_table : (alloc_table intP)) (intP_intM_t_0_2 : (memory intP int32)) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 46#
             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 34#
              (Int.(<=) (offset_min intP_t_0_2_alloc_table t_0) (0)))
             /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 34#
                 (Int.(>=) (offset_max intP_t_0_2_alloc_table t_0)
                 (Int.(-) (integer_of_int32 taille_0) (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 38 46#
                   (Int.(>) (integer_of_int32 taille_0) (0))))))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/" 0 0 0#
            ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 65 10 76#
             ((forall i_0_0:int.
               (((Int.(<=) (0) i_0_0)
                /\ (Int.(<) i_0_0 (Int.(-) (integer_of_int32 taille_0) (1)))) ->
                (Int.(<=)
                (integer_of_int32 (select intP_intM_t_0_2 (shift t_0 i_0_0)))
                (integer_of_int32
                (select intP_intM_t_0_2 (shift t_0 (Int.(+) i_0_0 (1)))))))) ->
              ((integer_of_int32 result) = (1))))
            /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 66 10 74#
               ((exists i_1:int.
                 ((Int.(<=) (0) i_1)
                 /\ ((Int.(<) i_1 (Int.(-) (integer_of_int32 taille_0) (1)))
                    /\ (Int.(>)
                       (integer_of_int32
                       (select intP_intM_t_0_2 (shift t_0 i_1)))
                       (integer_of_int32
                       (select intP_intM_t_0_2 (shift t_0 (Int.(+) i_1 (1))))))))) ->
                ((integer_of_int32 result) = (0)))))) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let i_0_1 = ref (any_int32 ()) in
     (let __retres_0 = ref (any_int32 ()) in
     try
      begin
        try
         begin
           (let _jessie_118 = (i_0_1 := (safe_int32_of_integer_ (0))) in ());
          ('Loop_4: 
          begin
            loop
            invariant
              { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 72 19 61#
                 (forall j_0:int.
                  (((Int.(<=) (0) j_0)
                   /\ (Int.(<) j_0 (integer_of_int32 !i_0_1))) ->
                   (Int.(<=)
                   (integer_of_int32
                   (select intP_intM_t_0_2 (shift t_0 j_0)))
                   (integer_of_int32
                   (select intP_intM_t_0_2 (shift t_0 (Int.(+) j_0 (1)))))))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 71 19 33#
                   ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 71 19 23#
                    (Int.(<=) (0) (integer_of_int32 !i_0_1)))
                   /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 71 22 33#
                      (Int.(<=) (integer_of_int32 !i_0_1)
                      (Int.(-) (integer_of_int32 taille_0) (1))))))) } 
              
             begin
               any () requires { true }  ensures { true } ;
              try
               begin
                 (let _jessie_122 =
                 begin
                   (if (Int.(<) (integer_of_int32 !i_0_1) (integer_of_int32 
                                                           (safe_int32_of_integer_ 
                                                            (Int.(-) 
                                                              (integer_of_int32 taille_0) (1)))))
                   then () else (raise (Goto_while_0_break_exc ())));
                  (if (Int.(>) (integer_of_int32 (safe_acc_ intP_intM_t_0_2 
                                                  (shift t_0 (integer_of_int32 !i_0_1)))) 
                       (integer_of_int32 (safe_acc_ intP_intM_t_0_2 (shift t_0 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (Int.(+) 
                                                                    (integer_of_int32 !i_0_1) (1))))))))
                  then
                   begin
                     (let _jessie_120 =
                     (__retres_0 := (safe_int32_of_integer_ (0))) in ());
                    (raise (Return_label_exc ())) end else ());
                  (i_0_1 := (safe_int32_of_integer_ (Int.(+) (integer_of_int32 !i_0_1) (1))));
                  !i_0_1 end in ()); (raise (Loop_continue_exc ())) end with
               Loop_continue_exc _jessie_8 -> () end end end;
           (raise (Goto_while_0_break_exc ())) end) end with
         Goto_while_0_break_exc _jessie_5 -> ('While_0_break:  ()) end;
       (let _jessie_124 = (__retres_0 := (safe_int32_of_integer_ (1))) in ());
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      ('Return_label:  begin   (return := !__retres_0); (raise Return) end) end));
    absurd  end with Return -> !return end)) 

let increasing_safety "expl:Function increasing, Safety"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 69 4 14#=
 fun (t_0 : (pointer intP)) (taille_0 : int32) (intP_t_0_2_alloc_table : (alloc_table intP)) (intP_intM_t_0_2 : (memory intP int32)) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 46#
             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 34#
              (Int.(<=) (offset_min intP_t_0_2_alloc_table t_0) (0)))
             /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 11 34#
                 (Int.(>=) (offset_max intP_t_0_2_alloc_table t_0)
                 (Int.(-) (integer_of_int32 taille_0) (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 64 38 46#
                   (Int.(>) (integer_of_int32 taille_0) (0))))))  }
  ensures { true } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let i_0_1 = ref (any_int32 ()) in
     (let __retres_0 = ref (any_int32 ()) in
     try
      begin
        try
         begin
           (let _jessie_109 = (i_0_1 := (safe_int32_of_integer_ (0))) in ());
          ('Loop_3: 
          begin
            loop
            invariant
              { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/Khaliq_Aghakarimov.jc" 140 9 1124#
                true) }
              variant { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 73 17 27# 
                (Int.(-)
                (Int.(-) (integer_of_int32 taille_0)
                (integer_of_int32 !i_0_1)) (1))) }
             begin
               any ()
               requires { true } reads { i_0_1 } 
                ensures { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 72 19 61#
                           (forall j_0:int.
                            (((Int.(<=) (0) j_0)
                             /\ (Int.(<) j_0 (integer_of_int32 !i_0_1))) ->
                             (Int.(<=)
                             (integer_of_int32
                             (select intP_intM_t_0_2 (shift t_0 j_0)))
                             (integer_of_int32
                             (select intP_intM_t_0_2
                             (shift t_0 (Int.(+) j_0 (1)))))))))
                          /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 71 19 33#
                             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 71 19 23#
                              (Int.(<=) (0) (integer_of_int32 !i_0_1)))
                             /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 71 22 33#
                                (Int.(<=) (integer_of_int32 !i_0_1)
                                (Int.(-) (integer_of_int32 taille_0) (1))))))) } ;
              try
               begin
                 (let _jessie_113 =
                 begin
                   (if (Int.(<) (integer_of_int32 !i_0_1) (integer_of_int32 
                                                           ("expl:arithmetic overflow"
                                                           #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 75 16 24#
                                                           (int32_of_integer_ 
                                                            (Int.(-) 
                                                              (integer_of_int32 taille_0) (1))))))
                   then () else (raise (Goto_while_0_break_exc ())));
                  (if (Int.(>) (integer_of_int32 ("expl:pointer dereference"
                                                 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 76 7 11#
                                                 (offset_acc_ intP_t_0_2_alloc_table intP_intM_t_0_2 t_0 
                                                  (integer_of_int32 !i_0_1)))) 
                       (integer_of_int32 ("expl:pointer dereference"
                                         #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 76 12 18#
                                         (offset_acc_ intP_t_0_2_alloc_table intP_intM_t_0_2 t_0 
                                          (integer_of_int32 ("expl:arithmetic overflow"
                                                            #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 76 14 17#
                                                            (int32_of_integer_ 
                                                             (Int.(+) 
                                                               (integer_of_int32 !i_0_1) (1)))))))))
                  then
                   begin
                     (let _jessie_111 =
                     (__retres_0 := (safe_int32_of_integer_ (0))) in ());
                    (raise (Return_label_exc ())) end else ());
                  (i_0_1 := ("expl:arithmetic overflow"
                            #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 75 25 28#
                            (int32_of_integer_ (Int.(+) (integer_of_int32 !i_0_1) (1)))));
                  !i_0_1 end in ()); (raise (Loop_continue_exc ())) end with
               Loop_continue_exc _jessie_8 -> () end end end;
           (raise (Goto_while_0_break_exc ())) end) end with
         Goto_while_0_break_exc _jessie_5 -> ('While_0_break:  ()) end;
       (let _jessie_115 = (__retres_0 := (safe_int32_of_integer_ (1))) in ());
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      ('Return_label:  begin   (return := !__retres_0); (raise Return) end) end));
    absurd  end with Return -> !return end)) 

let max3_ensures_default "W:diverges:N" "expl:Function max3, default behavior"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
             true)  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
            true) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_26 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_28 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_30 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_32 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_ensures_first1_case "W:diverges:N" "expl:Function max3, Behavior `first1_case'"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { ((Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
             /\ (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3)))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 6 11 26#
            ((integer_of_int32 result) = (integer_of_int32 num1))) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_44 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_46 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_48 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_50 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_ensures_first2_case "W:diverges:N" "expl:Function max3, Behavior `first2_case'"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { ((Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
             /\ (Int.(<=) (integer_of_int32 num1) (integer_of_int32 num3)))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 12 11 26#
            ((integer_of_int32 result) = (integer_of_int32 num3))) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_53 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_55 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_57 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_59 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_ensures_first_case "W:diverges:N" "expl:Function max3, Behavior `first_case'"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
             true)  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
            true) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_35 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_37 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_39 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_41 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_ensures_second1_case "W:diverges:N" "expl:Function max3, Behavior `second1_case'"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { ((Int.(<=) (integer_of_int32 num1) (integer_of_int32 num2))
             /\ (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3)))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 18 11 26#
            ((integer_of_int32 result) = (integer_of_int32 num2))) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_71 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_73 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_75 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_77 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_ensures_second2_case "W:diverges:N" "expl:Function max3, Behavior `second2_case'"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { ((Int.(<=) (integer_of_int32 num1) (integer_of_int32 num2))
             /\ (Int.(<=) (integer_of_int32 num2) (integer_of_int32 num3)))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 22 11 26#
            ((integer_of_int32 result) = (integer_of_int32 num3))) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_80 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_82 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_84 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_86 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_ensures_second_case "W:diverges:N" "expl:Function max3, Behavior `second_case'"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
             true)  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
            true) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_62 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_64 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_66 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_68 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let max3_safety "expl:Function max3, Safety"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 25 4 8#=
 fun (num1 : int32) (num2 : int32) (num3 : int32) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
             true)  } ensures { true } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let __retres = ref (any_int32 ()) in
     try
      begin
        (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num2))
        then
         (if (Int.(>) (integer_of_int32 num1) (integer_of_int32 num3))
         then
          begin
            (let _jessie_17 = (__retres := num1) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_19 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)
        else
         (if (Int.(>) (integer_of_int32 num2) (integer_of_int32 num3))
         then
          begin
            (let _jessie_21 = (__retres := num2) in ());
           (raise (Return_label_exc ())) end
         else
          begin
            (let _jessie_23 = (__retres := num3) in ());
           (raise (Return_label_exc ())) end)); (raise (Return_label_exc ()))
      end with Return_label_exc _jessie_1 ->
      ('Return_label:  begin   (return := !__retres); (raise Return) end) end);
    absurd  end with Return -> !return end)) 

let monotonic_ensures_default "W:diverges:N" "expl:Function monotonic, default behavior"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 89 4 13#=
 fun (t_1 : (pointer intP)) (taille_1 : int32) (intP_t_1_3_alloc_table : (alloc_table intP)) (intP_intM_t_1_3 : (memory intP int32)) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 48#
             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 36#
              (Int.(<=) (offset_min intP_t_1_3_alloc_table t_1) (0)))
             /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 36#
                 (Int.(>=) (offset_max intP_t_1_3_alloc_table t_1)
                 (Int.(-) (integer_of_int32 taille_1) (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 40 48#
                   (Int.(>) (integer_of_int32 taille_1) (0))))))  }
  ensures { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/" 0 0 0#
            true) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let i_1_0 = ref (any_int32 ()) in
     (let i_0_0_0 = ref (any_int32 ()) in
     (let __retres_1 = ref (any_int32 ()) in
     try
      begin
        try
         begin
           (let _jessie_144 = (i_1_0 := (safe_int32_of_integer_ (1))) in ());
          ('Loop_7: 
          begin
            loop
            invariant
              { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 92 19 61#
                 (forall j_1:int.
                  (((Int.(<=) (1) j_1)
                   /\ (Int.(<) j_1 (integer_of_int32 !i_1_0))) ->
                   (Int.(>=)
                   (integer_of_int32
                   (select intP_intM_t_1_3 (shift t_1 j_1)))
                   (integer_of_int32
                   (select intP_intM_t_1_3 (shift t_1 (Int.(-) j_1 (1)))))))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 91 19 31#
                   ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 91 19 23#
                    (Int.(<=) (1) (integer_of_int32 !i_1_0)))
                   /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 91 22 31#
                      (Int.(<=) (integer_of_int32 !i_1_0)
                      (integer_of_int32 taille_1)))))) } 
             begin
               any () requires { true }  ensures { true } ;
              try
               begin
                 (let _jessie_148 =
                 begin
                   (if (Int.(<) (integer_of_int32 !i_1_0) (integer_of_int32 taille_1))
                   then () else (raise (Goto_while_0_break_exc ())));
                  (if (Int.(<) (integer_of_int32 (safe_acc_ intP_intM_t_1_3 
                                                  (shift t_1 (integer_of_int32 !i_1_0)))) 
                       (integer_of_int32 (safe_acc_ intP_intM_t_1_3 (shift t_1 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (Int.(-) 
                                                                    (integer_of_int32 !i_1_0) (1))))))))
                  then
                   begin
                     (let _jessie_146 =
                     (__retres_1 := (safe_int32_of_integer_ (0))) in ());
                    (raise (Return_label_exc ())) end else ());
                  (i_1_0 := (safe_int32_of_integer_ (Int.(+) (integer_of_int32 !i_1_0) (1))));
                  !i_1_0 end in ()); (raise (Loop_continue_exc ())) end with
               Loop_continue_exc _jessie_13 -> () end end end;
           (raise (Goto_while_0_break_exc ())) end) end with
         Goto_while_0_break_exc _jessie_9 -> ('While_0_break:  ()) end;
       (let _jessie_150 = (__retres_1 := (safe_int32_of_integer_ (1))) in ());
       (raise (Return_label_exc ()));
       try
        begin
          (let _jessie_152 = (i_0_0_0 := (safe_int32_of_integer_ (1))) in ());
         ('Loop_8: 
         begin
           loop
           invariant
             { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 102 19 61#
                (forall j_2:int.
                 (((Int.(<=) (1) j_2)
                  /\ (Int.(<) j_2 (integer_of_int32 !i_0_0_0))) ->
                  (Int.(<=)
                  (integer_of_int32 (select intP_intM_t_1_3 (shift t_1 j_2)))
                  (integer_of_int32
                  (select intP_intM_t_1_3 (shift t_1 (Int.(-) j_2 (1)))))))))
               /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 101 19 31#
                  ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 101 19 23#
                   (Int.(<=) (1) (integer_of_int32 !i_0_0_0)))
                  /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 101 22 31#
                     (Int.(<=) (integer_of_int32 !i_0_0_0)
                     (integer_of_int32 taille_1)))))) } 
            begin
              any () requires { true }  ensures { true } ;
             try
              begin
                (let _jessie_156 =
                begin
                  (if (Int.(<) (integer_of_int32 !i_0_0_0) (integer_of_int32 taille_1))
                  then () else (raise (Goto_while_0_break_0_exc ())));
                 (if (Int.(>) (integer_of_int32 (safe_acc_ intP_intM_t_1_3 
                                                 (shift t_1 (integer_of_int32 !i_0_0_0)))) 
                      (integer_of_int32 (safe_acc_ intP_intM_t_1_3 (shift t_1 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (Int.(-) 
                                                                    (integer_of_int32 !i_0_0_0) (1))))))))
                 then
                  begin
                    (let _jessie_154 =
                    (__retres_1 := (safe_int32_of_integer_ (0))) in ());
                   (raise (Return_label_exc ())) end else ());
                 (i_0_0_0 := (safe_int32_of_integer_ (Int.(+) (integer_of_int32 !i_0_0_0) (1))));
                 !i_0_0_0 end in ()); (raise (Loop_continue_exc ())) end with
              Loop_continue_exc _jessie_15 -> () end end end;
          (raise (Goto_while_0_break_0_exc ())) end) end with
        Goto_while_0_break_0_exc _jessie_10 -> ('While_0_break_0:  ()) end;
       (let _jessie_158 = (__retres_1 := (safe_int32_of_integer_ (1))) in ());
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_11 ->
      ('Return_label:  begin   (return := !__retres_1); (raise Return) end) end)));
    absurd  end with Return -> !return end)) 

let monotonic_safety "expl:Function monotonic, Safety"
 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 89 4 13#=
 fun (t_1 : (pointer intP)) (taille_1 : int32) (intP_t_1_3_alloc_table : (alloc_table intP)) (intP_intM_t_1_3 : (memory intP int32)) ->
  requires { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 48#
             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 36#
              (Int.(<=) (offset_min intP_t_1_3_alloc_table t_1) (0)))
             /\ ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 13 36#
                 (Int.(>=) (offset_max intP_t_1_3_alloc_table t_1)
                 (Int.(-) (integer_of_int32 taille_1) (1))))
                /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 85 40 48#
                   (Int.(>) (integer_of_int32 taille_1) (0))))))  }
  ensures { true } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let i_1_0 = ref (any_int32 ()) in
     (let i_0_0_0 = ref (any_int32 ()) in
     (let __retres_1 = ref (any_int32 ()) in
     try
      begin
        try
         begin
           (let _jessie_127 = (i_1_0 := (safe_int32_of_integer_ (1))) in ());
          ('Loop_5: 
          begin
            loop
            invariant
              { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/Khaliq_Aghakarimov.jc" 190 9 1075#
                true) }
              variant { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 93 17 25# 
                (Int.(-) (integer_of_int32 taille_1)
                (integer_of_int32 !i_1_0))) }
             begin
               any ()
               requires { true } reads { i_1_0 } 
                ensures { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 92 19 61#
                           (forall j_1:int.
                            (((Int.(<=) (1) j_1)
                             /\ (Int.(<) j_1 (integer_of_int32 !i_1_0))) ->
                             (Int.(>=)
                             (integer_of_int32
                             (select intP_intM_t_1_3 (shift t_1 j_1)))
                             (integer_of_int32
                             (select intP_intM_t_1_3
                             (shift t_1 (Int.(-) j_1 (1)))))))))
                          /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 91 19 31#
                             ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 91 19 23#
                              (Int.(<=) (1) (integer_of_int32 !i_1_0)))
                             /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 91 22 31#
                                (Int.(<=) (integer_of_int32 !i_1_0)
                                (integer_of_int32 taille_1)))))) } ;
              try
               begin
                 (let _jessie_131 =
                 begin
                   (if (Int.(<) (integer_of_int32 !i_1_0) (integer_of_int32 taille_1))
                   then () else (raise (Goto_while_0_break_exc ())));
                  (if (Int.(<) (integer_of_int32 ("expl:pointer dereference"
                                                 #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 96 16 20#
                                                 (offset_acc_ intP_t_1_3_alloc_table intP_intM_t_1_3 t_1 
                                                  (integer_of_int32 !i_1_0)))) 
                       (integer_of_int32 ("expl:pointer dereference"
                                         #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 96 23 31#
                                         (offset_acc_ intP_t_1_3_alloc_table intP_intM_t_1_3 t_1 
                                          (integer_of_int32 ("expl:arithmetic overflow"
                                                            #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 96 25 30#
                                                            (int32_of_integer_ 
                                                             (Int.(-) 
                                                               (integer_of_int32 !i_1_0) (1)))))))))
                  then
                   begin
                     (let _jessie_129 =
                     (__retres_1 := (safe_int32_of_integer_ (0))) in ());
                    (raise (Return_label_exc ())) end else ());
                  (i_1_0 := ("expl:arithmetic overflow"
                            #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 95 36 39#
                            (int32_of_integer_ (Int.(+) (integer_of_int32 !i_1_0) (1)))));
                  !i_1_0 end in ()); (raise (Loop_continue_exc ())) end with
               Loop_continue_exc _jessie_13 -> () end end end;
           (raise (Goto_while_0_break_exc ())) end) end with
         Goto_while_0_break_exc _jessie_9 -> ('While_0_break:  ()) end;
       (let _jessie_133 = (__retres_1 := (safe_int32_of_integer_ (1))) in ());
       (raise (Return_label_exc ()));
       try
        begin
          (let _jessie_135 = (i_0_0_0 := (safe_int32_of_integer_ (1))) in ());
         ('Loop_6: 
         begin
           loop
           invariant
             { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.jessie/Khaliq_Aghakarimov.jc" 226 9 1095#
               true) }
             variant { (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 103 17 25# 
               (Int.(-) (integer_of_int32 taille_1)
               (integer_of_int32 !i_0_0_0))) }
            begin
              any ()
              requires { true } reads { i_0_0_0 } 
               ensures { ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 102 19 61#
                          (forall j_2:int.
                           (((Int.(<=) (1) j_2)
                            /\ (Int.(<) j_2 (integer_of_int32 !i_0_0_0))) ->
                            (Int.(<=)
                            (integer_of_int32
                            (select intP_intM_t_1_3 (shift t_1 j_2)))
                            (integer_of_int32
                            (select intP_intM_t_1_3
                            (shift t_1 (Int.(-) j_2 (1)))))))))
                         /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 101 19 31#
                            ((#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 101 19 23#
                             (Int.(<=) (1) (integer_of_int32 !i_0_0_0)))
                            /\ (#"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 101 22 31#
                               (Int.(<=) (integer_of_int32 !i_0_0_0)
                               (integer_of_int32 taille_1)))))) } ;
             try
              begin
                (let _jessie_139 =
                begin
                  (if (Int.(<) (integer_of_int32 !i_0_0_0) (integer_of_int32 taille_1))
                  then () else (raise (Goto_while_0_break_0_exc ())));
                 (if (Int.(>) (integer_of_int32 ("expl:pointer dereference"
                                                #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 107 16 20#
                                                (offset_acc_ intP_t_1_3_alloc_table intP_intM_t_1_3 t_1 
                                                 (integer_of_int32 !i_0_0_0)))) 
                      (integer_of_int32 ("expl:pointer dereference"
                                        #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 107 23 31#
                                        (offset_acc_ intP_t_1_3_alloc_table intP_intM_t_1_3 t_1 
                                         (integer_of_int32 ("expl:arithmetic overflow"
                                                           #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 107 25 30#
                                                           (int32_of_integer_ 
                                                            (Int.(-) 
                                                              (integer_of_int32 !i_0_0_0) (1)))))))))
                 then
                  begin
                    (let _jessie_137 =
                    (__retres_1 := (safe_int32_of_integer_ (0))) in ());
                   (raise (Return_label_exc ())) end else ());
                 (i_0_0_0 := ("expl:arithmetic overflow"
                             #"/home/xaliq/CS/L3/S2/Certification/proof/Khaliq_Aghakarimov.c" 106 36 39#
                             (int32_of_integer_ (Int.(+) (integer_of_int32 !i_0_0_0) (1)))));
                 !i_0_0_0 end in ()); (raise (Loop_continue_exc ())) end with
              Loop_continue_exc _jessie_15 -> () end end end;
          (raise (Goto_while_0_break_0_exc ())) end) end with
        Goto_while_0_break_0_exc _jessie_10 -> ('While_0_break_0:  ()) end;
       (let _jessie_141 = (__retres_1 := (safe_int32_of_integer_ (1))) in ());
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_11 ->
      ('Return_label:  begin   (return := !__retres_1); (raise Return) end) end)));
    absurd  end with Return -> !return end)) 

end


